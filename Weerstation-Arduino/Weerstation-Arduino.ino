#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include "DHT.h"
#include <Adafruit_BMP085.h>
#include "arduino_secrets.h"
#include <ArduinoMqttClient.h>
#include <WiFiS3.h>

//connecten met wifi en MQTT en data doorsturen
char          ssid[] = SECRET_SSID;
char          pass[] = SECRET_PASS; 
WiFiClient    wifiClient;
MqttClient    mqttClient(wifiClient);
const char    broker[]         = "192.168.144.1"; //"192.168.122.1";
const int     port             = 1883;
const char    topic[]          = "dionstroet/temperatuur";
const char    topic2[]          = "dionstroet/luchtvochtigheid";
const char    topic3[]          = "dionstroet/luchtdruk";
const char    topic4[]          = "dionstroet/regen";
const char    subscribeTopic[] = "rensbroersma/moisture";
long          count            = 0;
const long    drawinterval     = 1500;
const long    interval         = 10000; //tijd tussen zendingen
unsigned long previousMillis   = 0;

//voor het scherm
#define SCREEN_WIDTH 128 // OLED display breedte, in pixels
#define SCREEN_HEIGHT 64 // OLED display hppgte, in pixels
 
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//voor de temperatuur en luchtvochtigheidsensor
#define DHTPIN 2 
#define DHTTYPE    DHT22
DHT dht(DHTPIN, DHTTYPE);

//voor de luchtdruksensor
Adafruit_BMP085 bmp;

//regensensor
#define sensor_DO A0

//zorgt voor interval tussen verschillende schermen
int draw_state = 0;

//voor ontangen data
int num;

//Bitmaps
//luchtvochtigheid
const unsigned char humid_bits [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 
	0xff, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 
	0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x7b, 0xff, 0xff, 0xff, 0x80, 
	0x00, 0x00, 0x7b, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0xf9, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
	0xf9, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xf8, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0xf8, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xfc, 0x7f, 0xff, 0xff, 
	0xc0, 0x00, 0x00, 0x7e, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x7f, 0x1f, 0xff, 0xff, 0x80, 0x00, 
	0x00, 0x3f, 0x9f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xcf, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 
	0xe7, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xfb, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00
};

//temperatuur
const unsigned char temperature_bits [] PROGMEM = {
	0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x31, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x80, 0x19, 
	0xfc, 0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x19, 0xf8, 0x00, 0x00, 0x00, 
	0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 
	0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x01, 0x86, 0x19, 0xfe, 
	0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x19, 0xf0, 0x00, 0x00, 0x00, 0x01, 
	0x86, 0x19, 0xf8, 0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x19, 0xfc, 0x00, 
	0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0x86, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x07, 0x06, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 
	0x07, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x83, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x3f, 0xc1, 0x80, 
	0x00, 0x00, 0x00, 0x18, 0x7f, 0xe1, 0x80, 0x00, 0x00, 0x00, 0x18, 0x7f, 0xe1, 0x80, 0x00, 0x00, 
	0x00, 0x08, 0x7f, 0xe1, 0x80, 0x00, 0x00, 0x00, 0x0c, 0x3f, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x0c, 
	0x1f, 0x83, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x0e, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00
};

//luchtdruk
const unsigned char druk_bits [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0xc0, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x3c, 0x00, 
	0x00, 0x00, 0x3c, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x00, 0xc0, 0x03, 0xc0, 0x00, 0x01, 
	0xc3, 0x00, 0xc0, 0x30, 0xe0, 0x00, 0x03, 0x81, 0x80, 0x00, 0x60, 0x70, 0x00, 0x07, 0x01, 0x80, 
	0x00, 0x60, 0x38, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x0e, 0x00, 0x18, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x00, 0x31, 0xc0, 0x00, 0xc0, 0x00, 0xe3, 0x00, 
	0x30, 0xe0, 0x00, 0xc0, 0x01, 0xc3, 0x00, 0x60, 0x00, 0x00, 0xe0, 0x00, 0x01, 0x80, 0x60, 0x00, 
	0x01, 0xe0, 0x00, 0x01, 0x80, 0x60, 0x00, 0x01, 0xe0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x01, 0xe0, 
	0x00, 0x00, 0xc0, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0x00, 0xc0, 0xc2, 0x00, 0x01, 0xe0, 0x00, 0x10, 
	0xc0, 0xcf, 0x00, 0x01, 0xe0, 0x00, 0x3c, 0xc0, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0x00, 0xc0, 0xc0, 
	0x00, 0x01, 0xe0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x01, 0xe0, 0x00, 0x00, 0xc0, 0x60, 0x00, 0x01, 
	0xe0, 0x00, 0x01, 0x80, 0x60, 0x00, 0x03, 0x30, 0x00, 0x01, 0x80, 0x60, 0x00, 0x03, 0x30, 0x00, 
	0x01, 0x80, 0x30, 0xe0, 0x03, 0x30, 0x01, 0xc3, 0x00, 0x39, 0x80, 0x03, 0x30, 0x00, 0x67, 0x00, 
	0x18, 0x00, 0x06, 0x18, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//zon voor regensensor
const unsigned char Zon [] PROGMEM = {
	0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x80, 0x18, 0x00, 0x00, 0x00, 0x04, 0x01, 0x80, 
	0x30, 0x00, 0x00, 0x00, 0x06, 0x01, 0x80, 0x60, 0x00, 0x00, 0x00, 0x03, 0x01, 0x80, 0x40, 0x00, 
	0x00, 0x00, 0x01, 0x80, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x18, 
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x03, 0x80, 0x0f, 
	0xf8, 0x01, 0xe0, 0x00, 0x00, 0xe0, 0x38, 0x1e, 0x07, 0x80, 0x00, 0x00, 0x30, 0xe0, 0x03, 0x0e, 
	0x00, 0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x00, 
	0x00, 0x03, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x06, 
	0x00, 0x00, 0x60, 0x00, 0x00, 0xff, 0xc6, 0x00, 0x00, 0x63, 0xff, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xc0, 0x00, 
	0x00, 0x00, 0x01, 0x80, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 
	0x70, 0x60, 0x07, 0x06, 0x00, 0x00, 0x01, 0xc0, 0x3c, 0x3c, 0x03, 0x80, 0x00, 0x07, 0x00, 0x07, 
	0xf0, 0x00, 0xf0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 
	0x00, 0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x03, 0x01, 0x80, 0xc0, 0x00, 0x00, 
	0x00, 0x03, 0x01, 0x80, 0x60, 0x00, 0x00, 0x00, 0x06, 0x01, 0x80, 0x60, 0x00, 0x00, 0x00, 0x0c, 
	0x01, 0x80, 0x30, 0x00, 0x00, 0x00, 0x08, 0x01, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//wolk voor regensensor
const unsigned char wolk [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x8f, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x31, 0xfc, 0x00, 
	0x00, 0x00, 0xc0, 0x00, 0x1f, 0x8f, 0x00, 0x00, 0x01, 0x80, 0x00, 0x0c, 0x01, 0xc0, 0x00, 0x03, 
	0x80, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x03, 0x00, 0x00, 
	0x00, 0x00, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x18, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 
	0x30, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x70, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x38, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 0x18, 0x00, 0x00, 0x00, 0x06, 0x00, 0xc0, 0x18, 0x00, 0x00, 
	0x00, 0x06, 0x00, 0xc0, 0x18, 0x00, 0x00, 0x00, 0x06, 0x10, 0xc2, 0x18, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// voor bloem
const unsigned char bloem [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x0e, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xe0, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x42, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x62, 0x11, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x11, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
	0xff, 0xf0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//dode bloem
const unsigned char dode_bloem [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x63, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x6f, 0xc0, 0x00, 
	0x00, 0x00, 0x01, 0xe0, 0x38, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x26, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20, 0x23, 0x90, 0x00, 0x00, 0x00, 0x00, 0xff, 
	0x60, 0xf0, 0x00, 0x00, 0x00, 0x01, 0x81, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x03, 0x01, 0xc0, 0xc0, 
	0x00, 0x00, 0x00, 0x02, 0x47, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x02, 0xfc, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 
	0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x0e, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x06, 0x00, 
	0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 
	0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void setup() {
  Serial.begin(115200);
  dht.begin();
  bmp.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  delay(2000);
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.display();
  //voor wifi/MQTT
  while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
   delay(5000);
  }
  Serial.print("wifi conected");

  bool MQTTconnected = false;
  while (!MQTTconnected) {  
  if (!mqttClient.connect(broker, port)) delay(1000);
   else
      MQTTconnected = true;
  }
  Serial.print("mqtt connected");
  mqttClient.subscribe (subscribeTopic);
  mqttClient.onMessage (onMqttMessage);

}

void loop() {
  //MQTT
  mqttClient.poll();
  //haalt de data op
  float t = dht.readTemperature();
  float h = dht.readHumidity();
  float p = bmp.readPressure()/(float)100;
  int val = digitalRead(sensor_DO);
  //zorgt ervoor dat de draw_state oploopt
  draw_state++;
  //reset de draw_state
 if ( draw_state == 10  ){
    draw_state = 0;
  }
  // wisselt draw_state na delay
  delay(1500);

  switch(draw_state) {
    //MQTT vochtigheid sensor
    case 0:
      display.clearDisplay();
      display.setTextSize(1);
      display.setCursor(10,0);
      display.print("grondvochtigheid");
      display.setTextSize(1);
      display.setCursor(110,0);
      display.print("5/5");
      if (num < 450) {
      display.setTextSize(2);  
      display.setCursor(56,32);  
      display.print("droog");
      display.drawBitmap(0,17, dode_bloem , 50, 40, WHITE);
      } 
      else {
      display.setTextSize(2);
      display.setCursor(56,32);  
      display.print("nat");
      display.drawBitmap(0,15, bloem, 50, 40, WHITE);
      }
      break;
      //temperatuur
    case 2:
      display.clearDisplay(); 
      display.drawCircle(107, 30, 3, WHITE);
      display.setTextSize(1);
      display.setCursor(30,0);
      display.print("Temperatuur");
      display.setTextSize(1);
      display.setCursor(110,0);
      display.print("1/5");
      display.setTextSize(2);
      display.setCursor(112,32);
      display.print("C");
      display.setTextSize(2);
      display.setCursor(56,32);
      display.print(t, 1);
      display.drawBitmap(0,17, temperature_bits, 50, 40, WHITE); 
      break;
      //luchtvochtigheid
    case 4:
      display.clearDisplay(); 
      display.setTextSize(1);
      display.setCursor(10,0);
      display.print("Luchtvochtigheid");
      display.setTextSize(1);
      display.setCursor(110,0);
      display.print("2/5");
      display.setTextSize(2);
      display.setCursor(56,32);
      display.print(h, 1);
      display.setTextSize(2);
      display.setCursor(110,32);
      display.print("%");
      display.drawBitmap(0,15, humid_bits, 50, 40, WHITE);
      break;
      //luchtdruk
    case 6:
      display.clearDisplay(); 
      display.setTextSize(1);
      display.setCursor(30,0);
      display.print("Luchtdruk");
      display.setTextSize(1);
      display.setCursor(110,0);
      display.print("3/5");
      display.setTextSize(2);
      display.setCursor(56,32);
      display.print(p, 1);
      display.drawBitmap(0,15, druk_bits, 50, 40, WHITE);
      break;
    case 8:
    //regensensor
      display.clearDisplay();
      display.setTextSize(1);
      display.setCursor(45,0);
      display.print("Regen");
      display.setTextSize(1);
      display.setCursor(110,0);
      display.print("4/5");
      if (val == 1) {
      display.setTextSize(2);  
      display.setCursor(56,32);  
      display.print("Droog");
      display.drawBitmap(0,17, Zon, 50, 40, WHITE);
      } 
      else {
      display.setTextSize(2);
      display.setCursor(56,32);  
      display.print("Regen");
      display.drawBitmap(0,15, wolk, 50, 40, WHITE);
      }
      break;
  }

   //tekent een lijn en zorgt ervoor dat het scherm aangaat
  display.drawLine(0,10,128,10, WHITE);
  display.display();

  //tijd tussen versturingen
  unsigned long currentMillis = millis();
   if (currentMillis - previousMillis >= interval) {
   previousMillis = currentMillis;

   //naam geven aan data
   mqttClient.beginMessage(topic,true,0);
   mqttClient.print(t);
   mqttClient.endMessage();
   mqttClient.beginMessage(topic2,true,0);
   mqttClient.print(h);
   mqttClient.endMessage();
   mqttClient.beginMessage(topic3,true,0);
   mqttClient.print(p);
   mqttClient.endMessage();
   mqttClient.beginMessage(topic4,true,0);
   mqttClient.print(val);
   mqttClient.endMessage();
   
   delay(1);
   }
  }
  
  //data wordt opgehaald uit de MQTT serever
  void onMqttMessage(int messageSize) {
  Serial.print("Received a message with topic '");
  Serial.println(mqttClient.messageTopic());
  String message = "";
  while (mqttClient.available()) {
  message.concat((char)mqttClient.read());
  }
  Serial.println(message);
  num = message.toInt();
}


